Deploying a Machine Learning Model With Gradio

Source: https://i.ytimg.com/vi/RiCQzBluTxU/maxresdefault.jpg
0.0 Preface
Customer churn is a crucial metric for any business. If a business can predict customer churn, it can take preventive measures to retain the customers. Machine learning models can be trained on past customer data to predict if a customer is likely to churn or not. In this article, we will build and deploy a customer churn prediction app with Gradio.

1.0 Introduction
Gradio is a Python library that allows you to quickly create customizable UI components around your machine learning models, neural networks, and other functions. With Gradio, you can easily create a web app or a desktop app for your machine learning model. Gradio is an excellent tool for data scientists and machine learning engineers who want to build, test, and deploy their models quickly.

Let’s build a customer churn prediction app with Gradio. We will use the customer data from a telecom company to train a machine learning model. Then, we will create a Gradio app that takes in customer data and predicts if the customer is likely to churn or not.

2.0 Prerequisites
Before we get started, make sure you have the following installed:

Requirements to be installed
You can install Gradio and other required libraries with the following command:

using pip to install requirements
3.0 Exporting our requirements
First, we need to export the machine learning model that can predict customer churn. We will use the best model from my last project. In the last project, we already trained and fine-tuned a RandomForest Classifier Model, so we’ll use pickle to export it.

Exporting our model
We must also export the cleaned dataframe, as well as the scaler and the encoder we used in preprocessing.

Exporting data, scaler and encoder using Pickle
To do all this, check the Jupyter Notebook from my last project. Go to my last project and run the updated Jupyter Notebook in my github repository. It has all the code you need to export the above requirements.

4.0 Building the Gradio App
Now that we have trained our machine learning model, we can build a Gradio app that takes in customer data and predicts if the customer is likely to churn or not.

We will use the Gradio library to create the app. The app will have several input fields for the user to enter the customer’s demographic and service usage information. Once the user enters the required information, the app will pass it to the machine learning model to generate the churn prediction.

4.1 Installing Gradio
To get started, we need to install the Gradio library using pip. Open a terminal and enter the following command:

installing gradio with pip
4.2 Importing Libraries
Once the installation is complete, we can start building our Gradio app. We will start by importing the necessary libraries.

importing necessary libraries
4.3 Load Files Using Pickle
Now we load the trained machine learning model. We will also load the encoder and scaler used to preprocess the data during training.

Load the model and encoder and scaler from my last project
Now, we load the cleaned dataframe that we also exported before. Remember to use pickle and give them variable names.

Load the data we exported with Jupyter Notebook
4.4 Creating Input and Output
Next, we will define the input and output interfaces for the Gradio app. The input interface will consist of several input fields, including dropdowns, sliders, and radio buttons, for the user to enter the customer data. The output interface will display the churn prediction generated by the machine learning model.

Creating Input and Output Components
We have defined input components such as dropdowns, sliders, and radio buttons. These components take in user input and store them as variables. We have also defined an output component, which displays the churn prediction generated by the machine learning model.

4.5 Put Input Components into a Dataframe
Let’s create a function that puts our input components into a DataFrame. We will call this function later.

Function that puts input components into a dataframe
This dataframe will have to be preprocessed just like we did in our last project, so that our machine learning model can use it.

4.6 Preprocessing and Prediction
Next, we will preprocess the user input, make a churn prediction, and display the prediction on the output interface. We will define a function `predict_churn` that takes in the user input, preprocesses it, generates a churn prediction, and returns the prediction as a string.

Here is the code for the predict_churn function:

creating the predict_churn function
The predict_churn function first calls the input_df_creator function to create a pandas DataFrame from the user input. The categorical variables in the DataFrame are then encoded using the encoder that we loaded earlier, and the numerical variables are scaled using the scaler that we also loaded earlier. The encoded and scaled variables are then combined to create a new DataFrame.

Finally, the machine learning model is used to make a churn prediction, and the prediction is returned as a string.

5.0 Launching the App
We are now ready to launch the Gradio app using the predict_churn function and the input and output components that we defined earlier. Here is the code to launch the app:

Launching the app
The launch method of the iface object starts the Gradio app. When the app is launched, the user interface is displayed in the browser, and the user can enter their data to get a churn prediction.

6.0 Conclusion
That’s it! We have now built a Gradio app that predicts customer churn using machine learning. The app is simple to use and can be easily deployed to the cloud or integrated into a web application. Click on the link below to see all the code.
